// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ksrof/trello-action/external/github (interfaces: Issues)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/ksrof/trello-action/external/github"
	utils "github.com/ksrof/trello-action/utils"
)

// MockIssues is a mock of Issues interface.
type MockIssues struct {
	ctrl     *gomock.Controller
	recorder *MockIssuesMockRecorder
}

// MockIssuesMockRecorder is the mock recorder for MockIssues.
type MockIssuesMockRecorder struct {
	mock *MockIssues
}

// NewMockIssues creates a new mock instance.
func NewMockIssues(ctrl *gomock.Controller) *MockIssues {
	mock := &MockIssues{ctrl: ctrl}
	mock.recorder = &MockIssuesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssues) EXPECT() *MockIssuesMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIssues) Get(arg0 context.Context, arg1 []utils.Field) (*github.IssuesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*github.IssuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIssuesMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIssues)(nil).Get), arg0, arg1)
}

// GetLabels mocks base method.
func (m *MockIssues) GetLabels(arg0 context.Context, arg1 []utils.Field) (*github.IssuesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels", arg0, arg1)
	ret0, _ := ret[0].(*github.IssuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockIssuesMockRecorder) GetLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockIssues)(nil).GetLabels), arg0, arg1)
}
